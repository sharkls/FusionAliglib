// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CLidarParam.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_CLIDARPARAM_H_
#define _FAST_DDS_GENERATED_CLIDARPARAM_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CLIDARPARAM_SOURCE)
#define CLIDARPARAM_DllAPI __declspec( dllexport )
#else
#define CLIDARPARAM_DllAPI __declspec( dllimport )
#endif // CLIDARPARAM_SOURCE
#else
#define CLIDARPARAM_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CLIDARPARAM_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima







/*!
 * @brief This class represents the structure CLidarDev defined by the user in the IDL file.
 * @ingroup CLidarParam
 */
class CLidarDev
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport CLidarDev();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~CLidarDev();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object CLidarDev that will be copied.
     */
    eProsima_user_DllExport CLidarDev(
            const CLidarDev& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object CLidarDev that will be copied.
     */
    eProsima_user_DllExport CLidarDev(
            CLidarDev&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object CLidarDev that will be copied.
     */
    eProsima_user_DllExport CLidarDev& operator =(
            const CLidarDev& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object CLidarDev that will be copied.
     */
    eProsima_user_DllExport CLidarDev& operator =(
            CLidarDev&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x CLidarDev object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const CLidarDev& x) const;

    /*!
     * @brief Comparison operator.
     * @param x CLidarDev object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const CLidarDev& x) const;

    /*!
     * @brief This function copies the value in member strSrcIp
     * @param _strSrcIp New value to be copied in member strSrcIp
     */
    eProsima_user_DllExport void strSrcIp(
            const std::string& _strSrcIp);

    /*!
     * @brief This function moves the value in member strSrcIp
     * @param _strSrcIp New value to be moved in member strSrcIp
     */
    eProsima_user_DllExport void strSrcIp(
            std::string&& _strSrcIp);

    /*!
     * @brief This function returns a constant reference to member strSrcIp
     * @return Constant reference to member strSrcIp
     */
    eProsima_user_DllExport const std::string& strSrcIp() const;

    /*!
     * @brief This function returns a reference to member strSrcIp
     * @return Reference to member strSrcIp
     */
    eProsima_user_DllExport std::string& strSrcIp();


    /*!
     * @brief This function copies the value in member strDstIp
     * @param _strDstIp New value to be copied in member strDstIp
     */
    eProsima_user_DllExport void strDstIp(
            const std::string& _strDstIp);

    /*!
     * @brief This function moves the value in member strDstIp
     * @param _strDstIp New value to be moved in member strDstIp
     */
    eProsima_user_DllExport void strDstIp(
            std::string&& _strDstIp);

    /*!
     * @brief This function returns a constant reference to member strDstIp
     * @return Constant reference to member strDstIp
     */
    eProsima_user_DllExport const std::string& strDstIp() const;

    /*!
     * @brief This function returns a reference to member strDstIp
     * @return Reference to member strDstIp
     */
    eProsima_user_DllExport std::string& strDstIp();


    /*!
     * @brief This function copies the value in member strRedisIp
     * @param _strRedisIp New value to be copied in member strRedisIp
     */
    eProsima_user_DllExport void strRedisIp(
            const std::string& _strRedisIp);

    /*!
     * @brief This function moves the value in member strRedisIp
     * @param _strRedisIp New value to be moved in member strRedisIp
     */
    eProsima_user_DllExport void strRedisIp(
            std::string&& _strRedisIp);

    /*!
     * @brief This function returns a constant reference to member strRedisIp
     * @return Constant reference to member strRedisIp
     */
    eProsima_user_DllExport const std::string& strRedisIp() const;

    /*!
     * @brief This function returns a reference to member strRedisIp
     * @return Reference to member strRedisIp
     */
    eProsima_user_DllExport std::string& strRedisIp();


    /*!
     * @brief This function copies the value in member strRedisTopic
     * @param _strRedisTopic New value to be copied in member strRedisTopic
     */
    eProsima_user_DllExport void strRedisTopic(
            const std::string& _strRedisTopic);

    /*!
     * @brief This function moves the value in member strRedisTopic
     * @param _strRedisTopic New value to be moved in member strRedisTopic
     */
    eProsima_user_DllExport void strRedisTopic(
            std::string&& _strRedisTopic);

    /*!
     * @brief This function returns a constant reference to member strRedisTopic
     * @return Constant reference to member strRedisTopic
     */
    eProsima_user_DllExport const std::string& strRedisTopic() const;

    /*!
     * @brief This function returns a reference to member strRedisTopic
     * @return Reference to member strRedisTopic
     */
    eProsima_user_DllExport std::string& strRedisTopic();


    /*!
     * @brief This function copies the value in member strDataType
     * @param _strDataType New value to be copied in member strDataType
     */
    eProsima_user_DllExport void strDataType(
            const std::string& _strDataType);

    /*!
     * @brief This function moves the value in member strDataType
     * @param _strDataType New value to be moved in member strDataType
     */
    eProsima_user_DllExport void strDataType(
            std::string&& _strDataType);

    /*!
     * @brief This function returns a constant reference to member strDataType
     * @return Constant reference to member strDataType
     */
    eProsima_user_DllExport const std::string& strDataType() const;

    /*!
     * @brief This function returns a reference to member strDataType
     * @return Reference to member strDataType
     */
    eProsima_user_DllExport std::string& strDataType();


    /*!
     * @brief This function copies the value in member strLidarType
     * @param _strLidarType New value to be copied in member strLidarType
     */
    eProsima_user_DllExport void strLidarType(
            const std::string& _strLidarType);

    /*!
     * @brief This function moves the value in member strLidarType
     * @param _strLidarType New value to be moved in member strLidarType
     */
    eProsima_user_DllExport void strLidarType(
            std::string&& _strLidarType);

    /*!
     * @brief This function returns a constant reference to member strLidarType
     * @return Constant reference to member strLidarType
     */
    eProsima_user_DllExport const std::string& strLidarType() const;

    /*!
     * @brief This function returns a reference to member strLidarType
     * @return Reference to member strLidarType
     */
    eProsima_user_DllExport std::string& strLidarType();


    /*!
     * @brief This function copies the value in member strBmpPath1
     * @param _strBmpPath1 New value to be copied in member strBmpPath1
     */
    eProsima_user_DllExport void strBmpPath1(
            const std::string& _strBmpPath1);

    /*!
     * @brief This function moves the value in member strBmpPath1
     * @param _strBmpPath1 New value to be moved in member strBmpPath1
     */
    eProsima_user_DllExport void strBmpPath1(
            std::string&& _strBmpPath1);

    /*!
     * @brief This function returns a constant reference to member strBmpPath1
     * @return Constant reference to member strBmpPath1
     */
    eProsima_user_DllExport const std::string& strBmpPath1() const;

    /*!
     * @brief This function returns a reference to member strBmpPath1
     * @return Reference to member strBmpPath1
     */
    eProsima_user_DllExport std::string& strBmpPath1();


    /*!
     * @brief This function copies the value in member strBmpPath2
     * @param _strBmpPath2 New value to be copied in member strBmpPath2
     */
    eProsima_user_DllExport void strBmpPath2(
            const std::string& _strBmpPath2);

    /*!
     * @brief This function moves the value in member strBmpPath2
     * @param _strBmpPath2 New value to be moved in member strBmpPath2
     */
    eProsima_user_DllExport void strBmpPath2(
            std::string&& _strBmpPath2);

    /*!
     * @brief This function returns a constant reference to member strBmpPath2
     * @return Constant reference to member strBmpPath2
     */
    eProsima_user_DllExport const std::string& strBmpPath2() const;

    /*!
     * @brief This function returns a reference to member strBmpPath2
     * @return Reference to member strBmpPath2
     */
    eProsima_user_DllExport std::string& strBmpPath2();


    /*!
     * @brief This function sets a value in member usPort
     * @param _usPort New value for member usPort
     */
    eProsima_user_DllExport void usPort(
            uint16_t _usPort);

    /*!
     * @brief This function returns the value of member usPort
     * @return Value of member usPort
     */
    eProsima_user_DllExport uint16_t usPort() const;

    /*!
     * @brief This function returns a reference to member usPort
     * @return Reference to member usPort
     */
    eProsima_user_DllExport uint16_t& usPort();


    /*!
     * @brief This function sets a value in member ucLidarId
     * @param _ucLidarId New value for member ucLidarId
     */
    eProsima_user_DllExport void ucLidarId(
            uint8_t _ucLidarId);

    /*!
     * @brief This function returns the value of member ucLidarId
     * @return Value of member ucLidarId
     */
    eProsima_user_DllExport uint8_t ucLidarId() const;

    /*!
     * @brief This function returns a reference to member ucLidarId
     * @return Reference to member ucLidarId
     */
    eProsima_user_DllExport uint8_t& ucLidarId();


    /*!
     * @brief This function sets a value in member dLidarLon
     * @param _dLidarLon New value for member dLidarLon
     */
    eProsima_user_DllExport void dLidarLon(
            double _dLidarLon);

    /*!
     * @brief This function returns the value of member dLidarLon
     * @return Value of member dLidarLon
     */
    eProsima_user_DllExport double dLidarLon() const;

    /*!
     * @brief This function returns a reference to member dLidarLon
     * @return Reference to member dLidarLon
     */
    eProsima_user_DllExport double& dLidarLon();


    /*!
     * @brief This function sets a value in member dLidarLat
     * @param _dLidarLat New value for member dLidarLat
     */
    eProsima_user_DllExport void dLidarLat(
            double _dLidarLat);

    /*!
     * @brief This function returns the value of member dLidarLat
     * @return Value of member dLidarLat
     */
    eProsima_user_DllExport double dLidarLat() const;

    /*!
     * @brief This function returns a reference to member dLidarLat
     * @return Reference to member dLidarLat
     */
    eProsima_user_DllExport double& dLidarLat();


    /*!
     * @brief This function sets a value in member fLidarNorthAngle
     * @param _fLidarNorthAngle New value for member fLidarNorthAngle
     */
    eProsima_user_DllExport void fLidarNorthAngle(
            float _fLidarNorthAngle);

    /*!
     * @brief This function returns the value of member fLidarNorthAngle
     * @return Value of member fLidarNorthAngle
     */
    eProsima_user_DllExport float fLidarNorthAngle() const;

    /*!
     * @brief This function returns a reference to member fLidarNorthAngle
     * @return Reference to member fLidarNorthAngle
     */
    eProsima_user_DllExport float& fLidarNorthAngle();


    /*!
     * @brief This function sets a value in member bRotationTranslation
     * @param _bRotationTranslation New value for member bRotationTranslation
     */
    eProsima_user_DllExport void bRotationTranslation(
            bool _bRotationTranslation);

    /*!
     * @brief This function returns the value of member bRotationTranslation
     * @return Value of member bRotationTranslation
     */
    eProsima_user_DllExport bool bRotationTranslation() const;

    /*!
     * @brief This function returns a reference to member bRotationTranslation
     * @return Reference to member bRotationTranslation
     */
    eProsima_user_DllExport bool& bRotationTranslation();


    /*!
     * @brief This function copies the value in member fSelfRotTrans
     * @param _fSelfRotTrans New value to be copied in member fSelfRotTrans
     */
    eProsima_user_DllExport void fSelfRotTrans(
            const std::array<float, 6>& _fSelfRotTrans);

    /*!
     * @brief This function moves the value in member fSelfRotTrans
     * @param _fSelfRotTrans New value to be moved in member fSelfRotTrans
     */
    eProsima_user_DllExport void fSelfRotTrans(
            std::array<float, 6>&& _fSelfRotTrans);

    /*!
     * @brief This function returns a constant reference to member fSelfRotTrans
     * @return Constant reference to member fSelfRotTrans
     */
    eProsima_user_DllExport const std::array<float, 6>& fSelfRotTrans() const;

    /*!
     * @brief This function returns a reference to member fSelfRotTrans
     * @return Reference to member fSelfRotTrans
     */
    eProsima_user_DllExport std::array<float, 6>& fSelfRotTrans();


    /*!
     * @brief This function copies the value in member fRangeRotTrans1
     * @param _fRangeRotTrans1 New value to be copied in member fRangeRotTrans1
     */
    eProsima_user_DllExport void fRangeRotTrans1(
            const std::array<float, 6>& _fRangeRotTrans1);

    /*!
     * @brief This function moves the value in member fRangeRotTrans1
     * @param _fRangeRotTrans1 New value to be moved in member fRangeRotTrans1
     */
    eProsima_user_DllExport void fRangeRotTrans1(
            std::array<float, 6>&& _fRangeRotTrans1);

    /*!
     * @brief This function returns a constant reference to member fRangeRotTrans1
     * @return Constant reference to member fRangeRotTrans1
     */
    eProsima_user_DllExport const std::array<float, 6>& fRangeRotTrans1() const;

    /*!
     * @brief This function returns a reference to member fRangeRotTrans1
     * @return Reference to member fRangeRotTrans1
     */
    eProsima_user_DllExport std::array<float, 6>& fRangeRotTrans1();


    /*!
     * @brief This function copies the value in member fRangeRotTrans2
     * @param _fRangeRotTrans2 New value to be copied in member fRangeRotTrans2
     */
    eProsima_user_DllExport void fRangeRotTrans2(
            const std::array<float, 6>& _fRangeRotTrans2);

    /*!
     * @brief This function moves the value in member fRangeRotTrans2
     * @param _fRangeRotTrans2 New value to be moved in member fRangeRotTrans2
     */
    eProsima_user_DllExport void fRangeRotTrans2(
            std::array<float, 6>&& _fRangeRotTrans2);

    /*!
     * @brief This function returns a constant reference to member fRangeRotTrans2
     * @return Constant reference to member fRangeRotTrans2
     */
    eProsima_user_DllExport const std::array<float, 6>& fRangeRotTrans2() const;

    /*!
     * @brief This function returns a reference to member fRangeRotTrans2
     * @return Reference to member fRangeRotTrans2
     */
    eProsima_user_DllExport std::array<float, 6>& fRangeRotTrans2();


    /*!
     * @brief This function copies the value in member fUseAngle
     * @param _fUseAngle New value to be copied in member fUseAngle
     */
    eProsima_user_DllExport void fUseAngle(
            const std::array<float, 4>& _fUseAngle);

    /*!
     * @brief This function moves the value in member fUseAngle
     * @param _fUseAngle New value to be moved in member fUseAngle
     */
    eProsima_user_DllExport void fUseAngle(
            std::array<float, 4>&& _fUseAngle);

    /*!
     * @brief This function returns a constant reference to member fUseAngle
     * @return Constant reference to member fUseAngle
     */
    eProsima_user_DllExport const std::array<float, 4>& fUseAngle() const;

    /*!
     * @brief This function returns a reference to member fUseAngle
     * @return Reference to member fUseAngle
     */
    eProsima_user_DllExport std::array<float, 4>& fUseAngle();


    /*!
     * @brief This function copies the value in member ucBuf
     * @param _ucBuf New value to be copied in member ucBuf
     */
    eProsima_user_DllExport void ucBuf(
            const std::array<uint8_t, 8>& _ucBuf);

    /*!
     * @brief This function moves the value in member ucBuf
     * @param _ucBuf New value to be moved in member ucBuf
     */
    eProsima_user_DllExport void ucBuf(
            std::array<uint8_t, 8>&& _ucBuf);

    /*!
     * @brief This function returns a constant reference to member ucBuf
     * @return Constant reference to member ucBuf
     */
    eProsima_user_DllExport const std::array<uint8_t, 8>& ucBuf() const;

    /*!
     * @brief This function returns a reference to member ucBuf
     * @return Reference to member ucBuf
     */
    eProsima_user_DllExport std::array<uint8_t, 8>& ucBuf();


    /*!
     * @brief This function copies the value in member vecAngle
     * @param _vecAngle New value to be copied in member vecAngle
     */
    eProsima_user_DllExport void vecAngle(
            const std::vector<float>& _vecAngle);

    /*!
     * @brief This function moves the value in member vecAngle
     * @param _vecAngle New value to be moved in member vecAngle
     */
    eProsima_user_DllExport void vecAngle(
            std::vector<float>&& _vecAngle);

    /*!
     * @brief This function returns a constant reference to member vecAngle
     * @return Constant reference to member vecAngle
     */
    eProsima_user_DllExport const std::vector<float>& vecAngle() const;

    /*!
     * @brief This function returns a reference to member vecAngle
     * @return Reference to member vecAngle
     */
    eProsima_user_DllExport std::vector<float>& vecAngle();

private:

    std::string m_strSrcIp;
    std::string m_strDstIp;
    std::string m_strRedisIp;
    std::string m_strRedisTopic;
    std::string m_strDataType;
    std::string m_strLidarType;
    std::string m_strBmpPath1;
    std::string m_strBmpPath2;
    uint16_t m_usPort{0};
    uint8_t m_ucLidarId{0};
    double m_dLidarLon{0.0};
    double m_dLidarLat{0.0};
    float m_fLidarNorthAngle{0.0};
    bool m_bRotationTranslation{false};
    std::array<float, 6> m_fSelfRotTrans{0.0};
    std::array<float, 6> m_fRangeRotTrans1{0.0};
    std::array<float, 6> m_fRangeRotTrans2{0.0};
    std::array<float, 4> m_fUseAngle{0.0};
    std::array<uint8_t, 8> m_ucBuf{0};
    std::vector<float> m_vecAngle;

};




/*!
 * @brief This class represents the structure CLidarParam defined by the user in the IDL file.
 * @ingroup CLidarParam
 */
class CLidarParam
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport CLidarParam();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~CLidarParam();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object CLidarParam that will be copied.
     */
    eProsima_user_DllExport CLidarParam(
            const CLidarParam& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object CLidarParam that will be copied.
     */
    eProsima_user_DllExport CLidarParam(
            CLidarParam&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object CLidarParam that will be copied.
     */
    eProsima_user_DllExport CLidarParam& operator =(
            const CLidarParam& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object CLidarParam that will be copied.
     */
    eProsima_user_DllExport CLidarParam& operator =(
            CLidarParam&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x CLidarParam object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const CLidarParam& x) const;

    /*!
     * @brief Comparison operator.
     * @param x CLidarParam object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const CLidarParam& x) const;

    /*!
     * @brief This function copies the value in member strNICname
     * @param _strNICname New value to be copied in member strNICname
     */
    eProsima_user_DllExport void strNICname(
            const std::string& _strNICname);

    /*!
     * @brief This function moves the value in member strNICname
     * @param _strNICname New value to be moved in member strNICname
     */
    eProsima_user_DllExport void strNICname(
            std::string&& _strNICname);

    /*!
     * @brief This function returns a constant reference to member strNICname
     * @return Constant reference to member strNICname
     */
    eProsima_user_DllExport const std::string& strNICname() const;

    /*!
     * @brief This function returns a reference to member strNICname
     * @return Reference to member strNICname
     */
    eProsima_user_DllExport std::string& strNICname();


    /*!
     * @brief This function copies the value in member vecLidarDev
     * @param _vecLidarDev New value to be copied in member vecLidarDev
     */
    eProsima_user_DllExport void vecLidarDev(
            const std::vector<CLidarDev>& _vecLidarDev);

    /*!
     * @brief This function moves the value in member vecLidarDev
     * @param _vecLidarDev New value to be moved in member vecLidarDev
     */
    eProsima_user_DllExport void vecLidarDev(
            std::vector<CLidarDev>&& _vecLidarDev);

    /*!
     * @brief This function returns a constant reference to member vecLidarDev
     * @return Constant reference to member vecLidarDev
     */
    eProsima_user_DllExport const std::vector<CLidarDev>& vecLidarDev() const;

    /*!
     * @brief This function returns a reference to member vecLidarDev
     * @return Reference to member vecLidarDev
     */
    eProsima_user_DllExport std::vector<CLidarDev>& vecLidarDev();

private:

    std::string m_strNICname;
    std::vector<CLidarDev> m_vecLidarDev;

};

#endif // _FAST_DDS_GENERATED_CLIDARPARAM_H_



