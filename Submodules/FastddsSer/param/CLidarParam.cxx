// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CLidarParam.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CLidarParam.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>






CLidarDev::CLidarDev()
{
}

CLidarDev::~CLidarDev()
{
}

CLidarDev::CLidarDev(
        const CLidarDev& x)
{
    m_strSrcIp = x.m_strSrcIp;
    m_strDstIp = x.m_strDstIp;
    m_strRedisIp = x.m_strRedisIp;
    m_strRedisTopic = x.m_strRedisTopic;
    m_strDataType = x.m_strDataType;
    m_strLidarType = x.m_strLidarType;
    m_strBmpPath1 = x.m_strBmpPath1;
    m_strBmpPath2 = x.m_strBmpPath2;
    m_usPort = x.m_usPort;
    m_ucLidarId = x.m_ucLidarId;
    m_dLidarLon = x.m_dLidarLon;
    m_dLidarLat = x.m_dLidarLat;
    m_fLidarNorthAngle = x.m_fLidarNorthAngle;
    m_bRotationTranslation = x.m_bRotationTranslation;
    m_fSelfRotTrans = x.m_fSelfRotTrans;
    m_fRangeRotTrans1 = x.m_fRangeRotTrans1;
    m_fRangeRotTrans2 = x.m_fRangeRotTrans2;
    m_fUseAngle = x.m_fUseAngle;
    m_ucBuf = x.m_ucBuf;
    m_vecAngle = x.m_vecAngle;
}

CLidarDev::CLidarDev(
        CLidarDev&& x) noexcept
{
    m_strSrcIp = std::move(x.m_strSrcIp);
    m_strDstIp = std::move(x.m_strDstIp);
    m_strRedisIp = std::move(x.m_strRedisIp);
    m_strRedisTopic = std::move(x.m_strRedisTopic);
    m_strDataType = std::move(x.m_strDataType);
    m_strLidarType = std::move(x.m_strLidarType);
    m_strBmpPath1 = std::move(x.m_strBmpPath1);
    m_strBmpPath2 = std::move(x.m_strBmpPath2);
    m_usPort = x.m_usPort;
    m_ucLidarId = x.m_ucLidarId;
    m_dLidarLon = x.m_dLidarLon;
    m_dLidarLat = x.m_dLidarLat;
    m_fLidarNorthAngle = x.m_fLidarNorthAngle;
    m_bRotationTranslation = x.m_bRotationTranslation;
    m_fSelfRotTrans = std::move(x.m_fSelfRotTrans);
    m_fRangeRotTrans1 = std::move(x.m_fRangeRotTrans1);
    m_fRangeRotTrans2 = std::move(x.m_fRangeRotTrans2);
    m_fUseAngle = std::move(x.m_fUseAngle);
    m_ucBuf = std::move(x.m_ucBuf);
    m_vecAngle = std::move(x.m_vecAngle);
}

CLidarDev& CLidarDev::operator =(
        const CLidarDev& x)
{

    m_strSrcIp = x.m_strSrcIp;
    m_strDstIp = x.m_strDstIp;
    m_strRedisIp = x.m_strRedisIp;
    m_strRedisTopic = x.m_strRedisTopic;
    m_strDataType = x.m_strDataType;
    m_strLidarType = x.m_strLidarType;
    m_strBmpPath1 = x.m_strBmpPath1;
    m_strBmpPath2 = x.m_strBmpPath2;
    m_usPort = x.m_usPort;
    m_ucLidarId = x.m_ucLidarId;
    m_dLidarLon = x.m_dLidarLon;
    m_dLidarLat = x.m_dLidarLat;
    m_fLidarNorthAngle = x.m_fLidarNorthAngle;
    m_bRotationTranslation = x.m_bRotationTranslation;
    m_fSelfRotTrans = x.m_fSelfRotTrans;
    m_fRangeRotTrans1 = x.m_fRangeRotTrans1;
    m_fRangeRotTrans2 = x.m_fRangeRotTrans2;
    m_fUseAngle = x.m_fUseAngle;
    m_ucBuf = x.m_ucBuf;
    m_vecAngle = x.m_vecAngle;
    return *this;
}

CLidarDev& CLidarDev::operator =(
        CLidarDev&& x) noexcept
{

    m_strSrcIp = std::move(x.m_strSrcIp);
    m_strDstIp = std::move(x.m_strDstIp);
    m_strRedisIp = std::move(x.m_strRedisIp);
    m_strRedisTopic = std::move(x.m_strRedisTopic);
    m_strDataType = std::move(x.m_strDataType);
    m_strLidarType = std::move(x.m_strLidarType);
    m_strBmpPath1 = std::move(x.m_strBmpPath1);
    m_strBmpPath2 = std::move(x.m_strBmpPath2);
    m_usPort = x.m_usPort;
    m_ucLidarId = x.m_ucLidarId;
    m_dLidarLon = x.m_dLidarLon;
    m_dLidarLat = x.m_dLidarLat;
    m_fLidarNorthAngle = x.m_fLidarNorthAngle;
    m_bRotationTranslation = x.m_bRotationTranslation;
    m_fSelfRotTrans = std::move(x.m_fSelfRotTrans);
    m_fRangeRotTrans1 = std::move(x.m_fRangeRotTrans1);
    m_fRangeRotTrans2 = std::move(x.m_fRangeRotTrans2);
    m_fUseAngle = std::move(x.m_fUseAngle);
    m_ucBuf = std::move(x.m_ucBuf);
    m_vecAngle = std::move(x.m_vecAngle);
    return *this;
}

bool CLidarDev::operator ==(
        const CLidarDev& x) const
{
    return (m_strSrcIp == x.m_strSrcIp &&
           m_strDstIp == x.m_strDstIp &&
           m_strRedisIp == x.m_strRedisIp &&
           m_strRedisTopic == x.m_strRedisTopic &&
           m_strDataType == x.m_strDataType &&
           m_strLidarType == x.m_strLidarType &&
           m_strBmpPath1 == x.m_strBmpPath1 &&
           m_strBmpPath2 == x.m_strBmpPath2 &&
           m_usPort == x.m_usPort &&
           m_ucLidarId == x.m_ucLidarId &&
           m_dLidarLon == x.m_dLidarLon &&
           m_dLidarLat == x.m_dLidarLat &&
           m_fLidarNorthAngle == x.m_fLidarNorthAngle &&
           m_bRotationTranslation == x.m_bRotationTranslation &&
           m_fSelfRotTrans == x.m_fSelfRotTrans &&
           m_fRangeRotTrans1 == x.m_fRangeRotTrans1 &&
           m_fRangeRotTrans2 == x.m_fRangeRotTrans2 &&
           m_fUseAngle == x.m_fUseAngle &&
           m_ucBuf == x.m_ucBuf &&
           m_vecAngle == x.m_vecAngle);
}

bool CLidarDev::operator !=(
        const CLidarDev& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member strSrcIp
 * @param _strSrcIp New value to be copied in member strSrcIp
 */
void CLidarDev::strSrcIp(
        const std::string& _strSrcIp)
{
    m_strSrcIp = _strSrcIp;
}

/*!
 * @brief This function moves the value in member strSrcIp
 * @param _strSrcIp New value to be moved in member strSrcIp
 */
void CLidarDev::strSrcIp(
        std::string&& _strSrcIp)
{
    m_strSrcIp = std::move(_strSrcIp);
}

/*!
 * @brief This function returns a constant reference to member strSrcIp
 * @return Constant reference to member strSrcIp
 */
const std::string& CLidarDev::strSrcIp() const
{
    return m_strSrcIp;
}

/*!
 * @brief This function returns a reference to member strSrcIp
 * @return Reference to member strSrcIp
 */
std::string& CLidarDev::strSrcIp()
{
    return m_strSrcIp;
}


/*!
 * @brief This function copies the value in member strDstIp
 * @param _strDstIp New value to be copied in member strDstIp
 */
void CLidarDev::strDstIp(
        const std::string& _strDstIp)
{
    m_strDstIp = _strDstIp;
}

/*!
 * @brief This function moves the value in member strDstIp
 * @param _strDstIp New value to be moved in member strDstIp
 */
void CLidarDev::strDstIp(
        std::string&& _strDstIp)
{
    m_strDstIp = std::move(_strDstIp);
}

/*!
 * @brief This function returns a constant reference to member strDstIp
 * @return Constant reference to member strDstIp
 */
const std::string& CLidarDev::strDstIp() const
{
    return m_strDstIp;
}

/*!
 * @brief This function returns a reference to member strDstIp
 * @return Reference to member strDstIp
 */
std::string& CLidarDev::strDstIp()
{
    return m_strDstIp;
}


/*!
 * @brief This function copies the value in member strRedisIp
 * @param _strRedisIp New value to be copied in member strRedisIp
 */
void CLidarDev::strRedisIp(
        const std::string& _strRedisIp)
{
    m_strRedisIp = _strRedisIp;
}

/*!
 * @brief This function moves the value in member strRedisIp
 * @param _strRedisIp New value to be moved in member strRedisIp
 */
void CLidarDev::strRedisIp(
        std::string&& _strRedisIp)
{
    m_strRedisIp = std::move(_strRedisIp);
}

/*!
 * @brief This function returns a constant reference to member strRedisIp
 * @return Constant reference to member strRedisIp
 */
const std::string& CLidarDev::strRedisIp() const
{
    return m_strRedisIp;
}

/*!
 * @brief This function returns a reference to member strRedisIp
 * @return Reference to member strRedisIp
 */
std::string& CLidarDev::strRedisIp()
{
    return m_strRedisIp;
}


/*!
 * @brief This function copies the value in member strRedisTopic
 * @param _strRedisTopic New value to be copied in member strRedisTopic
 */
void CLidarDev::strRedisTopic(
        const std::string& _strRedisTopic)
{
    m_strRedisTopic = _strRedisTopic;
}

/*!
 * @brief This function moves the value in member strRedisTopic
 * @param _strRedisTopic New value to be moved in member strRedisTopic
 */
void CLidarDev::strRedisTopic(
        std::string&& _strRedisTopic)
{
    m_strRedisTopic = std::move(_strRedisTopic);
}

/*!
 * @brief This function returns a constant reference to member strRedisTopic
 * @return Constant reference to member strRedisTopic
 */
const std::string& CLidarDev::strRedisTopic() const
{
    return m_strRedisTopic;
}

/*!
 * @brief This function returns a reference to member strRedisTopic
 * @return Reference to member strRedisTopic
 */
std::string& CLidarDev::strRedisTopic()
{
    return m_strRedisTopic;
}


/*!
 * @brief This function copies the value in member strDataType
 * @param _strDataType New value to be copied in member strDataType
 */
void CLidarDev::strDataType(
        const std::string& _strDataType)
{
    m_strDataType = _strDataType;
}

/*!
 * @brief This function moves the value in member strDataType
 * @param _strDataType New value to be moved in member strDataType
 */
void CLidarDev::strDataType(
        std::string&& _strDataType)
{
    m_strDataType = std::move(_strDataType);
}

/*!
 * @brief This function returns a constant reference to member strDataType
 * @return Constant reference to member strDataType
 */
const std::string& CLidarDev::strDataType() const
{
    return m_strDataType;
}

/*!
 * @brief This function returns a reference to member strDataType
 * @return Reference to member strDataType
 */
std::string& CLidarDev::strDataType()
{
    return m_strDataType;
}


/*!
 * @brief This function copies the value in member strLidarType
 * @param _strLidarType New value to be copied in member strLidarType
 */
void CLidarDev::strLidarType(
        const std::string& _strLidarType)
{
    m_strLidarType = _strLidarType;
}

/*!
 * @brief This function moves the value in member strLidarType
 * @param _strLidarType New value to be moved in member strLidarType
 */
void CLidarDev::strLidarType(
        std::string&& _strLidarType)
{
    m_strLidarType = std::move(_strLidarType);
}

/*!
 * @brief This function returns a constant reference to member strLidarType
 * @return Constant reference to member strLidarType
 */
const std::string& CLidarDev::strLidarType() const
{
    return m_strLidarType;
}

/*!
 * @brief This function returns a reference to member strLidarType
 * @return Reference to member strLidarType
 */
std::string& CLidarDev::strLidarType()
{
    return m_strLidarType;
}


/*!
 * @brief This function copies the value in member strBmpPath1
 * @param _strBmpPath1 New value to be copied in member strBmpPath1
 */
void CLidarDev::strBmpPath1(
        const std::string& _strBmpPath1)
{
    m_strBmpPath1 = _strBmpPath1;
}

/*!
 * @brief This function moves the value in member strBmpPath1
 * @param _strBmpPath1 New value to be moved in member strBmpPath1
 */
void CLidarDev::strBmpPath1(
        std::string&& _strBmpPath1)
{
    m_strBmpPath1 = std::move(_strBmpPath1);
}

/*!
 * @brief This function returns a constant reference to member strBmpPath1
 * @return Constant reference to member strBmpPath1
 */
const std::string& CLidarDev::strBmpPath1() const
{
    return m_strBmpPath1;
}

/*!
 * @brief This function returns a reference to member strBmpPath1
 * @return Reference to member strBmpPath1
 */
std::string& CLidarDev::strBmpPath1()
{
    return m_strBmpPath1;
}


/*!
 * @brief This function copies the value in member strBmpPath2
 * @param _strBmpPath2 New value to be copied in member strBmpPath2
 */
void CLidarDev::strBmpPath2(
        const std::string& _strBmpPath2)
{
    m_strBmpPath2 = _strBmpPath2;
}

/*!
 * @brief This function moves the value in member strBmpPath2
 * @param _strBmpPath2 New value to be moved in member strBmpPath2
 */
void CLidarDev::strBmpPath2(
        std::string&& _strBmpPath2)
{
    m_strBmpPath2 = std::move(_strBmpPath2);
}

/*!
 * @brief This function returns a constant reference to member strBmpPath2
 * @return Constant reference to member strBmpPath2
 */
const std::string& CLidarDev::strBmpPath2() const
{
    return m_strBmpPath2;
}

/*!
 * @brief This function returns a reference to member strBmpPath2
 * @return Reference to member strBmpPath2
 */
std::string& CLidarDev::strBmpPath2()
{
    return m_strBmpPath2;
}


/*!
 * @brief This function sets a value in member usPort
 * @param _usPort New value for member usPort
 */
void CLidarDev::usPort(
        uint16_t _usPort)
{
    m_usPort = _usPort;
}

/*!
 * @brief This function returns the value of member usPort
 * @return Value of member usPort
 */
uint16_t CLidarDev::usPort() const
{
    return m_usPort;
}

/*!
 * @brief This function returns a reference to member usPort
 * @return Reference to member usPort
 */
uint16_t& CLidarDev::usPort()
{
    return m_usPort;
}


/*!
 * @brief This function sets a value in member ucLidarId
 * @param _ucLidarId New value for member ucLidarId
 */
void CLidarDev::ucLidarId(
        uint8_t _ucLidarId)
{
    m_ucLidarId = _ucLidarId;
}

/*!
 * @brief This function returns the value of member ucLidarId
 * @return Value of member ucLidarId
 */
uint8_t CLidarDev::ucLidarId() const
{
    return m_ucLidarId;
}

/*!
 * @brief This function returns a reference to member ucLidarId
 * @return Reference to member ucLidarId
 */
uint8_t& CLidarDev::ucLidarId()
{
    return m_ucLidarId;
}


/*!
 * @brief This function sets a value in member dLidarLon
 * @param _dLidarLon New value for member dLidarLon
 */
void CLidarDev::dLidarLon(
        double _dLidarLon)
{
    m_dLidarLon = _dLidarLon;
}

/*!
 * @brief This function returns the value of member dLidarLon
 * @return Value of member dLidarLon
 */
double CLidarDev::dLidarLon() const
{
    return m_dLidarLon;
}

/*!
 * @brief This function returns a reference to member dLidarLon
 * @return Reference to member dLidarLon
 */
double& CLidarDev::dLidarLon()
{
    return m_dLidarLon;
}


/*!
 * @brief This function sets a value in member dLidarLat
 * @param _dLidarLat New value for member dLidarLat
 */
void CLidarDev::dLidarLat(
        double _dLidarLat)
{
    m_dLidarLat = _dLidarLat;
}

/*!
 * @brief This function returns the value of member dLidarLat
 * @return Value of member dLidarLat
 */
double CLidarDev::dLidarLat() const
{
    return m_dLidarLat;
}

/*!
 * @brief This function returns a reference to member dLidarLat
 * @return Reference to member dLidarLat
 */
double& CLidarDev::dLidarLat()
{
    return m_dLidarLat;
}


/*!
 * @brief This function sets a value in member fLidarNorthAngle
 * @param _fLidarNorthAngle New value for member fLidarNorthAngle
 */
void CLidarDev::fLidarNorthAngle(
        float _fLidarNorthAngle)
{
    m_fLidarNorthAngle = _fLidarNorthAngle;
}

/*!
 * @brief This function returns the value of member fLidarNorthAngle
 * @return Value of member fLidarNorthAngle
 */
float CLidarDev::fLidarNorthAngle() const
{
    return m_fLidarNorthAngle;
}

/*!
 * @brief This function returns a reference to member fLidarNorthAngle
 * @return Reference to member fLidarNorthAngle
 */
float& CLidarDev::fLidarNorthAngle()
{
    return m_fLidarNorthAngle;
}


/*!
 * @brief This function sets a value in member bRotationTranslation
 * @param _bRotationTranslation New value for member bRotationTranslation
 */
void CLidarDev::bRotationTranslation(
        bool _bRotationTranslation)
{
    m_bRotationTranslation = _bRotationTranslation;
}

/*!
 * @brief This function returns the value of member bRotationTranslation
 * @return Value of member bRotationTranslation
 */
bool CLidarDev::bRotationTranslation() const
{
    return m_bRotationTranslation;
}

/*!
 * @brief This function returns a reference to member bRotationTranslation
 * @return Reference to member bRotationTranslation
 */
bool& CLidarDev::bRotationTranslation()
{
    return m_bRotationTranslation;
}


/*!
 * @brief This function copies the value in member fSelfRotTrans
 * @param _fSelfRotTrans New value to be copied in member fSelfRotTrans
 */
void CLidarDev::fSelfRotTrans(
        const std::array<float, 6>& _fSelfRotTrans)
{
    m_fSelfRotTrans = _fSelfRotTrans;
}

/*!
 * @brief This function moves the value in member fSelfRotTrans
 * @param _fSelfRotTrans New value to be moved in member fSelfRotTrans
 */
void CLidarDev::fSelfRotTrans(
        std::array<float, 6>&& _fSelfRotTrans)
{
    m_fSelfRotTrans = std::move(_fSelfRotTrans);
}

/*!
 * @brief This function returns a constant reference to member fSelfRotTrans
 * @return Constant reference to member fSelfRotTrans
 */
const std::array<float, 6>& CLidarDev::fSelfRotTrans() const
{
    return m_fSelfRotTrans;
}

/*!
 * @brief This function returns a reference to member fSelfRotTrans
 * @return Reference to member fSelfRotTrans
 */
std::array<float, 6>& CLidarDev::fSelfRotTrans()
{
    return m_fSelfRotTrans;
}


/*!
 * @brief This function copies the value in member fRangeRotTrans1
 * @param _fRangeRotTrans1 New value to be copied in member fRangeRotTrans1
 */
void CLidarDev::fRangeRotTrans1(
        const std::array<float, 6>& _fRangeRotTrans1)
{
    m_fRangeRotTrans1 = _fRangeRotTrans1;
}

/*!
 * @brief This function moves the value in member fRangeRotTrans1
 * @param _fRangeRotTrans1 New value to be moved in member fRangeRotTrans1
 */
void CLidarDev::fRangeRotTrans1(
        std::array<float, 6>&& _fRangeRotTrans1)
{
    m_fRangeRotTrans1 = std::move(_fRangeRotTrans1);
}

/*!
 * @brief This function returns a constant reference to member fRangeRotTrans1
 * @return Constant reference to member fRangeRotTrans1
 */
const std::array<float, 6>& CLidarDev::fRangeRotTrans1() const
{
    return m_fRangeRotTrans1;
}

/*!
 * @brief This function returns a reference to member fRangeRotTrans1
 * @return Reference to member fRangeRotTrans1
 */
std::array<float, 6>& CLidarDev::fRangeRotTrans1()
{
    return m_fRangeRotTrans1;
}


/*!
 * @brief This function copies the value in member fRangeRotTrans2
 * @param _fRangeRotTrans2 New value to be copied in member fRangeRotTrans2
 */
void CLidarDev::fRangeRotTrans2(
        const std::array<float, 6>& _fRangeRotTrans2)
{
    m_fRangeRotTrans2 = _fRangeRotTrans2;
}

/*!
 * @brief This function moves the value in member fRangeRotTrans2
 * @param _fRangeRotTrans2 New value to be moved in member fRangeRotTrans2
 */
void CLidarDev::fRangeRotTrans2(
        std::array<float, 6>&& _fRangeRotTrans2)
{
    m_fRangeRotTrans2 = std::move(_fRangeRotTrans2);
}

/*!
 * @brief This function returns a constant reference to member fRangeRotTrans2
 * @return Constant reference to member fRangeRotTrans2
 */
const std::array<float, 6>& CLidarDev::fRangeRotTrans2() const
{
    return m_fRangeRotTrans2;
}

/*!
 * @brief This function returns a reference to member fRangeRotTrans2
 * @return Reference to member fRangeRotTrans2
 */
std::array<float, 6>& CLidarDev::fRangeRotTrans2()
{
    return m_fRangeRotTrans2;
}


/*!
 * @brief This function copies the value in member fUseAngle
 * @param _fUseAngle New value to be copied in member fUseAngle
 */
void CLidarDev::fUseAngle(
        const std::array<float, 4>& _fUseAngle)
{
    m_fUseAngle = _fUseAngle;
}

/*!
 * @brief This function moves the value in member fUseAngle
 * @param _fUseAngle New value to be moved in member fUseAngle
 */
void CLidarDev::fUseAngle(
        std::array<float, 4>&& _fUseAngle)
{
    m_fUseAngle = std::move(_fUseAngle);
}

/*!
 * @brief This function returns a constant reference to member fUseAngle
 * @return Constant reference to member fUseAngle
 */
const std::array<float, 4>& CLidarDev::fUseAngle() const
{
    return m_fUseAngle;
}

/*!
 * @brief This function returns a reference to member fUseAngle
 * @return Reference to member fUseAngle
 */
std::array<float, 4>& CLidarDev::fUseAngle()
{
    return m_fUseAngle;
}


/*!
 * @brief This function copies the value in member ucBuf
 * @param _ucBuf New value to be copied in member ucBuf
 */
void CLidarDev::ucBuf(
        const std::array<uint8_t, 8>& _ucBuf)
{
    m_ucBuf = _ucBuf;
}

/*!
 * @brief This function moves the value in member ucBuf
 * @param _ucBuf New value to be moved in member ucBuf
 */
void CLidarDev::ucBuf(
        std::array<uint8_t, 8>&& _ucBuf)
{
    m_ucBuf = std::move(_ucBuf);
}

/*!
 * @brief This function returns a constant reference to member ucBuf
 * @return Constant reference to member ucBuf
 */
const std::array<uint8_t, 8>& CLidarDev::ucBuf() const
{
    return m_ucBuf;
}

/*!
 * @brief This function returns a reference to member ucBuf
 * @return Reference to member ucBuf
 */
std::array<uint8_t, 8>& CLidarDev::ucBuf()
{
    return m_ucBuf;
}


/*!
 * @brief This function copies the value in member vecAngle
 * @param _vecAngle New value to be copied in member vecAngle
 */
void CLidarDev::vecAngle(
        const std::vector<float>& _vecAngle)
{
    m_vecAngle = _vecAngle;
}

/*!
 * @brief This function moves the value in member vecAngle
 * @param _vecAngle New value to be moved in member vecAngle
 */
void CLidarDev::vecAngle(
        std::vector<float>&& _vecAngle)
{
    m_vecAngle = std::move(_vecAngle);
}

/*!
 * @brief This function returns a constant reference to member vecAngle
 * @return Constant reference to member vecAngle
 */
const std::vector<float>& CLidarDev::vecAngle() const
{
    return m_vecAngle;
}

/*!
 * @brief This function returns a reference to member vecAngle
 * @return Reference to member vecAngle
 */
std::vector<float>& CLidarDev::vecAngle()
{
    return m_vecAngle;
}






CLidarParam::CLidarParam()
{
}

CLidarParam::~CLidarParam()
{
}

CLidarParam::CLidarParam(
        const CLidarParam& x)
{
    m_strNICname = x.m_strNICname;
    m_vecLidarDev = x.m_vecLidarDev;
}

CLidarParam::CLidarParam(
        CLidarParam&& x) noexcept
{
    m_strNICname = std::move(x.m_strNICname);
    m_vecLidarDev = std::move(x.m_vecLidarDev);
}

CLidarParam& CLidarParam::operator =(
        const CLidarParam& x)
{

    m_strNICname = x.m_strNICname;
    m_vecLidarDev = x.m_vecLidarDev;
    return *this;
}

CLidarParam& CLidarParam::operator =(
        CLidarParam&& x) noexcept
{

    m_strNICname = std::move(x.m_strNICname);
    m_vecLidarDev = std::move(x.m_vecLidarDev);
    return *this;
}

bool CLidarParam::operator ==(
        const CLidarParam& x) const
{
    return (m_strNICname == x.m_strNICname &&
           m_vecLidarDev == x.m_vecLidarDev);
}

bool CLidarParam::operator !=(
        const CLidarParam& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member strNICname
 * @param _strNICname New value to be copied in member strNICname
 */
void CLidarParam::strNICname(
        const std::string& _strNICname)
{
    m_strNICname = _strNICname;
}

/*!
 * @brief This function moves the value in member strNICname
 * @param _strNICname New value to be moved in member strNICname
 */
void CLidarParam::strNICname(
        std::string&& _strNICname)
{
    m_strNICname = std::move(_strNICname);
}

/*!
 * @brief This function returns a constant reference to member strNICname
 * @return Constant reference to member strNICname
 */
const std::string& CLidarParam::strNICname() const
{
    return m_strNICname;
}

/*!
 * @brief This function returns a reference to member strNICname
 * @return Reference to member strNICname
 */
std::string& CLidarParam::strNICname()
{
    return m_strNICname;
}


/*!
 * @brief This function copies the value in member vecLidarDev
 * @param _vecLidarDev New value to be copied in member vecLidarDev
 */
void CLidarParam::vecLidarDev(
        const std::vector<CLidarDev>& _vecLidarDev)
{
    m_vecLidarDev = _vecLidarDev;
}

/*!
 * @brief This function moves the value in member vecLidarDev
 * @param _vecLidarDev New value to be moved in member vecLidarDev
 */
void CLidarParam::vecLidarDev(
        std::vector<CLidarDev>&& _vecLidarDev)
{
    m_vecLidarDev = std::move(_vecLidarDev);
}

/*!
 * @brief This function returns a constant reference to member vecLidarDev
 * @return Constant reference to member vecLidarDev
 */
const std::vector<CLidarDev>& CLidarParam::vecLidarDev() const
{
    return m_vecLidarDev;
}

/*!
 * @brief This function returns a reference to member vecLidarDev
 * @return Reference to member vecLidarDev
 */
std::vector<CLidarDev>& CLidarParam::vecLidarDev()
{
    return m_vecLidarDev;
}


// Include auxiliary functions like for serializing/deserializing.
#include "CLidarParamCdrAux.ipp"

