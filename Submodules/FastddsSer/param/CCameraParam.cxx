// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CCameraParam.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "CCameraParam.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




C485Param::C485Param()
{
}

C485Param::~C485Param()
{
}

C485Param::C485Param(
        const C485Param& x)
{
    m_bNetTranf = x.m_bNetTranf;
    m_strUsbDev = x.m_strUsbDev;
    m_unBaudRate = x.m_unBaudRate;
    m_fTimeout = x.m_fTimeout;
    m_unId = x.m_unId;
    m_strIp = x.m_strIp;
    m_unPort = x.m_unPort;
}

C485Param::C485Param(
        C485Param&& x) noexcept
{
    m_bNetTranf = x.m_bNetTranf;
    m_strUsbDev = std::move(x.m_strUsbDev);
    m_unBaudRate = x.m_unBaudRate;
    m_fTimeout = x.m_fTimeout;
    m_unId = x.m_unId;
    m_strIp = std::move(x.m_strIp);
    m_unPort = x.m_unPort;
}

C485Param& C485Param::operator =(
        const C485Param& x)
{

    m_bNetTranf = x.m_bNetTranf;
    m_strUsbDev = x.m_strUsbDev;
    m_unBaudRate = x.m_unBaudRate;
    m_fTimeout = x.m_fTimeout;
    m_unId = x.m_unId;
    m_strIp = x.m_strIp;
    m_unPort = x.m_unPort;
    return *this;
}

C485Param& C485Param::operator =(
        C485Param&& x) noexcept
{

    m_bNetTranf = x.m_bNetTranf;
    m_strUsbDev = std::move(x.m_strUsbDev);
    m_unBaudRate = x.m_unBaudRate;
    m_fTimeout = x.m_fTimeout;
    m_unId = x.m_unId;
    m_strIp = std::move(x.m_strIp);
    m_unPort = x.m_unPort;
    return *this;
}

bool C485Param::operator ==(
        const C485Param& x) const
{
    return (m_bNetTranf == x.m_bNetTranf &&
           m_strUsbDev == x.m_strUsbDev &&
           m_unBaudRate == x.m_unBaudRate &&
           m_fTimeout == x.m_fTimeout &&
           m_unId == x.m_unId &&
           m_strIp == x.m_strIp &&
           m_unPort == x.m_unPort);
}

bool C485Param::operator !=(
        const C485Param& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member bNetTranf
 * @param _bNetTranf New value for member bNetTranf
 */
void C485Param::bNetTranf(
        bool _bNetTranf)
{
    m_bNetTranf = _bNetTranf;
}

/*!
 * @brief This function returns the value of member bNetTranf
 * @return Value of member bNetTranf
 */
bool C485Param::bNetTranf() const
{
    return m_bNetTranf;
}

/*!
 * @brief This function returns a reference to member bNetTranf
 * @return Reference to member bNetTranf
 */
bool& C485Param::bNetTranf()
{
    return m_bNetTranf;
}


/*!
 * @brief This function copies the value in member strUsbDev
 * @param _strUsbDev New value to be copied in member strUsbDev
 */
void C485Param::strUsbDev(
        const std::string& _strUsbDev)
{
    m_strUsbDev = _strUsbDev;
}

/*!
 * @brief This function moves the value in member strUsbDev
 * @param _strUsbDev New value to be moved in member strUsbDev
 */
void C485Param::strUsbDev(
        std::string&& _strUsbDev)
{
    m_strUsbDev = std::move(_strUsbDev);
}

/*!
 * @brief This function returns a constant reference to member strUsbDev
 * @return Constant reference to member strUsbDev
 */
const std::string& C485Param::strUsbDev() const
{
    return m_strUsbDev;
}

/*!
 * @brief This function returns a reference to member strUsbDev
 * @return Reference to member strUsbDev
 */
std::string& C485Param::strUsbDev()
{
    return m_strUsbDev;
}


/*!
 * @brief This function sets a value in member unBaudRate
 * @param _unBaudRate New value for member unBaudRate
 */
void C485Param::unBaudRate(
        uint32_t _unBaudRate)
{
    m_unBaudRate = _unBaudRate;
}

/*!
 * @brief This function returns the value of member unBaudRate
 * @return Value of member unBaudRate
 */
uint32_t C485Param::unBaudRate() const
{
    return m_unBaudRate;
}

/*!
 * @brief This function returns a reference to member unBaudRate
 * @return Reference to member unBaudRate
 */
uint32_t& C485Param::unBaudRate()
{
    return m_unBaudRate;
}


/*!
 * @brief This function sets a value in member fTimeout
 * @param _fTimeout New value for member fTimeout
 */
void C485Param::fTimeout(
        float _fTimeout)
{
    m_fTimeout = _fTimeout;
}

/*!
 * @brief This function returns the value of member fTimeout
 * @return Value of member fTimeout
 */
float C485Param::fTimeout() const
{
    return m_fTimeout;
}

/*!
 * @brief This function returns a reference to member fTimeout
 * @return Reference to member fTimeout
 */
float& C485Param::fTimeout()
{
    return m_fTimeout;
}


/*!
 * @brief This function sets a value in member unId
 * @param _unId New value for member unId
 */
void C485Param::unId(
        uint32_t _unId)
{
    m_unId = _unId;
}

/*!
 * @brief This function returns the value of member unId
 * @return Value of member unId
 */
uint32_t C485Param::unId() const
{
    return m_unId;
}

/*!
 * @brief This function returns a reference to member unId
 * @return Reference to member unId
 */
uint32_t& C485Param::unId()
{
    return m_unId;
}


/*!
 * @brief This function copies the value in member strIp
 * @param _strIp New value to be copied in member strIp
 */
void C485Param::strIp(
        const std::string& _strIp)
{
    m_strIp = _strIp;
}

/*!
 * @brief This function moves the value in member strIp
 * @param _strIp New value to be moved in member strIp
 */
void C485Param::strIp(
        std::string&& _strIp)
{
    m_strIp = std::move(_strIp);
}

/*!
 * @brief This function returns a constant reference to member strIp
 * @return Constant reference to member strIp
 */
const std::string& C485Param::strIp() const
{
    return m_strIp;
}

/*!
 * @brief This function returns a reference to member strIp
 * @return Reference to member strIp
 */
std::string& C485Param::strIp()
{
    return m_strIp;
}


/*!
 * @brief This function sets a value in member unPort
 * @param _unPort New value for member unPort
 */
void C485Param::unPort(
        uint32_t _unPort)
{
    m_unPort = _unPort;
}

/*!
 * @brief This function returns the value of member unPort
 * @return Value of member unPort
 */
uint32_t C485Param::unPort() const
{
    return m_unPort;
}

/*!
 * @brief This function returns a reference to member unPort
 * @return Reference to member unPort
 */
uint32_t& C485Param::unPort()
{
    return m_unPort;
}






CCameraDev::CCameraDev()
{
}

CCameraDev::~CCameraDev()
{
}

CCameraDev::CCameraDev(
        const CCameraDev& x)
{
    m_strCameraIp = x.m_strCameraIp;
    m_usCameraId = x.m_usCameraId;
    m_strCameraUser = x.m_strCameraUser;
    m_strCameraPwd = x.m_strCameraPwd;
    m_vecInParameter = x.m_vecInParameter;
    m_vecRotateMatrix = x.m_vecRotateMatrix;
    m_vecTranslationMatrix = x.m_vecTranslationMatrix;
    m_vecDistMatrix = x.m_vecDistMatrix;
}

CCameraDev::CCameraDev(
        CCameraDev&& x) noexcept
{
    m_strCameraIp = std::move(x.m_strCameraIp);
    m_usCameraId = x.m_usCameraId;
    m_strCameraUser = std::move(x.m_strCameraUser);
    m_strCameraPwd = std::move(x.m_strCameraPwd);
    m_vecInParameter = std::move(x.m_vecInParameter);
    m_vecRotateMatrix = std::move(x.m_vecRotateMatrix);
    m_vecTranslationMatrix = std::move(x.m_vecTranslationMatrix);
    m_vecDistMatrix = std::move(x.m_vecDistMatrix);
}

CCameraDev& CCameraDev::operator =(
        const CCameraDev& x)
{

    m_strCameraIp = x.m_strCameraIp;
    m_usCameraId = x.m_usCameraId;
    m_strCameraUser = x.m_strCameraUser;
    m_strCameraPwd = x.m_strCameraPwd;
    m_vecInParameter = x.m_vecInParameter;
    m_vecRotateMatrix = x.m_vecRotateMatrix;
    m_vecTranslationMatrix = x.m_vecTranslationMatrix;
    m_vecDistMatrix = x.m_vecDistMatrix;
    return *this;
}

CCameraDev& CCameraDev::operator =(
        CCameraDev&& x) noexcept
{

    m_strCameraIp = std::move(x.m_strCameraIp);
    m_usCameraId = x.m_usCameraId;
    m_strCameraUser = std::move(x.m_strCameraUser);
    m_strCameraPwd = std::move(x.m_strCameraPwd);
    m_vecInParameter = std::move(x.m_vecInParameter);
    m_vecRotateMatrix = std::move(x.m_vecRotateMatrix);
    m_vecTranslationMatrix = std::move(x.m_vecTranslationMatrix);
    m_vecDistMatrix = std::move(x.m_vecDistMatrix);
    return *this;
}

bool CCameraDev::operator ==(
        const CCameraDev& x) const
{
    return (m_strCameraIp == x.m_strCameraIp &&
           m_usCameraId == x.m_usCameraId &&
           m_strCameraUser == x.m_strCameraUser &&
           m_strCameraPwd == x.m_strCameraPwd &&
           m_vecInParameter == x.m_vecInParameter &&
           m_vecRotateMatrix == x.m_vecRotateMatrix &&
           m_vecTranslationMatrix == x.m_vecTranslationMatrix &&
           m_vecDistMatrix == x.m_vecDistMatrix);
}

bool CCameraDev::operator !=(
        const CCameraDev& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member strCameraIp
 * @param _strCameraIp New value to be copied in member strCameraIp
 */
void CCameraDev::strCameraIp(
        const std::string& _strCameraIp)
{
    m_strCameraIp = _strCameraIp;
}

/*!
 * @brief This function moves the value in member strCameraIp
 * @param _strCameraIp New value to be moved in member strCameraIp
 */
void CCameraDev::strCameraIp(
        std::string&& _strCameraIp)
{
    m_strCameraIp = std::move(_strCameraIp);
}

/*!
 * @brief This function returns a constant reference to member strCameraIp
 * @return Constant reference to member strCameraIp
 */
const std::string& CCameraDev::strCameraIp() const
{
    return m_strCameraIp;
}

/*!
 * @brief This function returns a reference to member strCameraIp
 * @return Reference to member strCameraIp
 */
std::string& CCameraDev::strCameraIp()
{
    return m_strCameraIp;
}


/*!
 * @brief This function sets a value in member usCameraId
 * @param _usCameraId New value for member usCameraId
 */
void CCameraDev::usCameraId(
        uint16_t _usCameraId)
{
    m_usCameraId = _usCameraId;
}

/*!
 * @brief This function returns the value of member usCameraId
 * @return Value of member usCameraId
 */
uint16_t CCameraDev::usCameraId() const
{
    return m_usCameraId;
}

/*!
 * @brief This function returns a reference to member usCameraId
 * @return Reference to member usCameraId
 */
uint16_t& CCameraDev::usCameraId()
{
    return m_usCameraId;
}


/*!
 * @brief This function copies the value in member strCameraUser
 * @param _strCameraUser New value to be copied in member strCameraUser
 */
void CCameraDev::strCameraUser(
        const std::string& _strCameraUser)
{
    m_strCameraUser = _strCameraUser;
}

/*!
 * @brief This function moves the value in member strCameraUser
 * @param _strCameraUser New value to be moved in member strCameraUser
 */
void CCameraDev::strCameraUser(
        std::string&& _strCameraUser)
{
    m_strCameraUser = std::move(_strCameraUser);
}

/*!
 * @brief This function returns a constant reference to member strCameraUser
 * @return Constant reference to member strCameraUser
 */
const std::string& CCameraDev::strCameraUser() const
{
    return m_strCameraUser;
}

/*!
 * @brief This function returns a reference to member strCameraUser
 * @return Reference to member strCameraUser
 */
std::string& CCameraDev::strCameraUser()
{
    return m_strCameraUser;
}


/*!
 * @brief This function copies the value in member strCameraPwd
 * @param _strCameraPwd New value to be copied in member strCameraPwd
 */
void CCameraDev::strCameraPwd(
        const std::string& _strCameraPwd)
{
    m_strCameraPwd = _strCameraPwd;
}

/*!
 * @brief This function moves the value in member strCameraPwd
 * @param _strCameraPwd New value to be moved in member strCameraPwd
 */
void CCameraDev::strCameraPwd(
        std::string&& _strCameraPwd)
{
    m_strCameraPwd = std::move(_strCameraPwd);
}

/*!
 * @brief This function returns a constant reference to member strCameraPwd
 * @return Constant reference to member strCameraPwd
 */
const std::string& CCameraDev::strCameraPwd() const
{
    return m_strCameraPwd;
}

/*!
 * @brief This function returns a reference to member strCameraPwd
 * @return Reference to member strCameraPwd
 */
std::string& CCameraDev::strCameraPwd()
{
    return m_strCameraPwd;
}


/*!
 * @brief This function copies the value in member vecInParameter
 * @param _vecInParameter New value to be copied in member vecInParameter
 */
void CCameraDev::vecInParameter(
        const std::vector<float>& _vecInParameter)
{
    m_vecInParameter = _vecInParameter;
}

/*!
 * @brief This function moves the value in member vecInParameter
 * @param _vecInParameter New value to be moved in member vecInParameter
 */
void CCameraDev::vecInParameter(
        std::vector<float>&& _vecInParameter)
{
    m_vecInParameter = std::move(_vecInParameter);
}

/*!
 * @brief This function returns a constant reference to member vecInParameter
 * @return Constant reference to member vecInParameter
 */
const std::vector<float>& CCameraDev::vecInParameter() const
{
    return m_vecInParameter;
}

/*!
 * @brief This function returns a reference to member vecInParameter
 * @return Reference to member vecInParameter
 */
std::vector<float>& CCameraDev::vecInParameter()
{
    return m_vecInParameter;
}


/*!
 * @brief This function copies the value in member vecRotateMatrix
 * @param _vecRotateMatrix New value to be copied in member vecRotateMatrix
 */
void CCameraDev::vecRotateMatrix(
        const std::vector<float>& _vecRotateMatrix)
{
    m_vecRotateMatrix = _vecRotateMatrix;
}

/*!
 * @brief This function moves the value in member vecRotateMatrix
 * @param _vecRotateMatrix New value to be moved in member vecRotateMatrix
 */
void CCameraDev::vecRotateMatrix(
        std::vector<float>&& _vecRotateMatrix)
{
    m_vecRotateMatrix = std::move(_vecRotateMatrix);
}

/*!
 * @brief This function returns a constant reference to member vecRotateMatrix
 * @return Constant reference to member vecRotateMatrix
 */
const std::vector<float>& CCameraDev::vecRotateMatrix() const
{
    return m_vecRotateMatrix;
}

/*!
 * @brief This function returns a reference to member vecRotateMatrix
 * @return Reference to member vecRotateMatrix
 */
std::vector<float>& CCameraDev::vecRotateMatrix()
{
    return m_vecRotateMatrix;
}


/*!
 * @brief This function copies the value in member vecTranslationMatrix
 * @param _vecTranslationMatrix New value to be copied in member vecTranslationMatrix
 */
void CCameraDev::vecTranslationMatrix(
        const std::vector<float>& _vecTranslationMatrix)
{
    m_vecTranslationMatrix = _vecTranslationMatrix;
}

/*!
 * @brief This function moves the value in member vecTranslationMatrix
 * @param _vecTranslationMatrix New value to be moved in member vecTranslationMatrix
 */
void CCameraDev::vecTranslationMatrix(
        std::vector<float>&& _vecTranslationMatrix)
{
    m_vecTranslationMatrix = std::move(_vecTranslationMatrix);
}

/*!
 * @brief This function returns a constant reference to member vecTranslationMatrix
 * @return Constant reference to member vecTranslationMatrix
 */
const std::vector<float>& CCameraDev::vecTranslationMatrix() const
{
    return m_vecTranslationMatrix;
}

/*!
 * @brief This function returns a reference to member vecTranslationMatrix
 * @return Reference to member vecTranslationMatrix
 */
std::vector<float>& CCameraDev::vecTranslationMatrix()
{
    return m_vecTranslationMatrix;
}


/*!
 * @brief This function copies the value in member vecDistMatrix
 * @param _vecDistMatrix New value to be copied in member vecDistMatrix
 */
void CCameraDev::vecDistMatrix(
        const std::vector<float>& _vecDistMatrix)
{
    m_vecDistMatrix = _vecDistMatrix;
}

/*!
 * @brief This function moves the value in member vecDistMatrix
 * @param _vecDistMatrix New value to be moved in member vecDistMatrix
 */
void CCameraDev::vecDistMatrix(
        std::vector<float>&& _vecDistMatrix)
{
    m_vecDistMatrix = std::move(_vecDistMatrix);
}

/*!
 * @brief This function returns a constant reference to member vecDistMatrix
 * @return Constant reference to member vecDistMatrix
 */
const std::vector<float>& CCameraDev::vecDistMatrix() const
{
    return m_vecDistMatrix;
}

/*!
 * @brief This function returns a reference to member vecDistMatrix
 * @return Reference to member vecDistMatrix
 */
std::vector<float>& CCameraDev::vecDistMatrix()
{
    return m_vecDistMatrix;
}






CCameraParam::CCameraParam()
{
}

CCameraParam::~CCameraParam()
{
}

CCameraParam::CCameraParam(
        const CCameraParam& x)
{
    m_unCameraCount = x.m_unCameraCount;
    m_bUseVideoServer = x.m_bUseVideoServer;
    m_cameraType = x.m_cameraType;
    m_vecCameraDev = x.m_vecCameraDev;
}

CCameraParam::CCameraParam(
        CCameraParam&& x) noexcept
{
    m_unCameraCount = x.m_unCameraCount;
    m_bUseVideoServer = x.m_bUseVideoServer;
    m_cameraType = x.m_cameraType;
    m_vecCameraDev = std::move(x.m_vecCameraDev);
}

CCameraParam& CCameraParam::operator =(
        const CCameraParam& x)
{

    m_unCameraCount = x.m_unCameraCount;
    m_bUseVideoServer = x.m_bUseVideoServer;
    m_cameraType = x.m_cameraType;
    m_vecCameraDev = x.m_vecCameraDev;
    return *this;
}

CCameraParam& CCameraParam::operator =(
        CCameraParam&& x) noexcept
{

    m_unCameraCount = x.m_unCameraCount;
    m_bUseVideoServer = x.m_bUseVideoServer;
    m_cameraType = x.m_cameraType;
    m_vecCameraDev = std::move(x.m_vecCameraDev);
    return *this;
}

bool CCameraParam::operator ==(
        const CCameraParam& x) const
{
    return (m_unCameraCount == x.m_unCameraCount &&
           m_bUseVideoServer == x.m_bUseVideoServer &&
           m_cameraType == x.m_cameraType &&
           m_vecCameraDev == x.m_vecCameraDev);
}

bool CCameraParam::operator !=(
        const CCameraParam& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member unCameraCount
 * @param _unCameraCount New value for member unCameraCount
 */
void CCameraParam::unCameraCount(
        uint16_t _unCameraCount)
{
    m_unCameraCount = _unCameraCount;
}

/*!
 * @brief This function returns the value of member unCameraCount
 * @return Value of member unCameraCount
 */
uint16_t CCameraParam::unCameraCount() const
{
    return m_unCameraCount;
}

/*!
 * @brief This function returns a reference to member unCameraCount
 * @return Reference to member unCameraCount
 */
uint16_t& CCameraParam::unCameraCount()
{
    return m_unCameraCount;
}


/*!
 * @brief This function sets a value in member bUseVideoServer
 * @param _bUseVideoServer New value for member bUseVideoServer
 */
void CCameraParam::bUseVideoServer(
        bool _bUseVideoServer)
{
    m_bUseVideoServer = _bUseVideoServer;
}

/*!
 * @brief This function returns the value of member bUseVideoServer
 * @return Value of member bUseVideoServer
 */
bool CCameraParam::bUseVideoServer() const
{
    return m_bUseVideoServer;
}

/*!
 * @brief This function returns a reference to member bUseVideoServer
 * @return Reference to member bUseVideoServer
 */
bool& CCameraParam::bUseVideoServer()
{
    return m_bUseVideoServer;
}


/*!
 * @brief This function sets a value in member cameraType
 * @param _cameraType New value for member cameraType
 */
void CCameraParam::cameraType(
        uint8_t _cameraType)
{
    m_cameraType = _cameraType;
}

/*!
 * @brief This function returns the value of member cameraType
 * @return Value of member cameraType
 */
uint8_t CCameraParam::cameraType() const
{
    return m_cameraType;
}

/*!
 * @brief This function returns a reference to member cameraType
 * @return Reference to member cameraType
 */
uint8_t& CCameraParam::cameraType()
{
    return m_cameraType;
}


/*!
 * @brief This function copies the value in member vecCameraDev
 * @param _vecCameraDev New value to be copied in member vecCameraDev
 */
void CCameraParam::vecCameraDev(
        const std::vector<CCameraDev>& _vecCameraDev)
{
    m_vecCameraDev = _vecCameraDev;
}

/*!
 * @brief This function moves the value in member vecCameraDev
 * @param _vecCameraDev New value to be moved in member vecCameraDev
 */
void CCameraParam::vecCameraDev(
        std::vector<CCameraDev>&& _vecCameraDev)
{
    m_vecCameraDev = std::move(_vecCameraDev);
}

/*!
 * @brief This function returns a constant reference to member vecCameraDev
 * @return Constant reference to member vecCameraDev
 */
const std::vector<CCameraDev>& CCameraParam::vecCameraDev() const
{
    return m_vecCameraDev;
}

/*!
 * @brief This function returns a reference to member vecCameraDev
 * @return Reference to member vecCameraDev
 */
std::vector<CCameraDev>& CCameraParam::vecCameraDev()
{
    return m_vecCameraDev;
}


// Include auxiliary functions like for serializing/deserializing.
#include "CCameraParamCdrAux.ipp"

