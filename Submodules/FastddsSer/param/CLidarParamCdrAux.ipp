// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CLidarParamCdrAux.ipp
 * This source file contains some declarations of CDR related functions.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_CLIDARPARAMCDRAUX_IPP_
#define _FAST_DDS_GENERATED_CLIDARPARAMCDRAUX_IPP_

#include "CLidarParamCdrAux.hpp"

#include <fastcdr/Cdr.h>
#include <fastcdr/CdrSizeCalculator.hpp>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

namespace eprosima {
namespace fastcdr {





template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const CLidarDev& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.strSrcIp(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.strDstIp(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.strRedisIp(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.strRedisTopic(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                data.strDataType(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(5),
                data.strLidarType(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(6),
                data.strBmpPath1(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(7),
                data.strBmpPath2(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(8),
                data.usPort(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(9),
                data.ucLidarId(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(10),
                data.dLidarLon(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(11),
                data.dLidarLat(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(12),
                data.fLidarNorthAngle(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(13),
                data.bRotationTranslation(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(14),
                data.fSelfRotTrans(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(15),
                data.fRangeRotTrans1(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(16),
                data.fRangeRotTrans2(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(17),
                data.fUseAngle(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(18),
                data.ucBuf(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(19),
                data.vecAngle(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const CLidarDev& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.strSrcIp()
        << eprosima::fastcdr::MemberId(1) << data.strDstIp()
        << eprosima::fastcdr::MemberId(2) << data.strRedisIp()
        << eprosima::fastcdr::MemberId(3) << data.strRedisTopic()
        << eprosima::fastcdr::MemberId(4) << data.strDataType()
        << eprosima::fastcdr::MemberId(5) << data.strLidarType()
        << eprosima::fastcdr::MemberId(6) << data.strBmpPath1()
        << eprosima::fastcdr::MemberId(7) << data.strBmpPath2()
        << eprosima::fastcdr::MemberId(8) << data.usPort()
        << eprosima::fastcdr::MemberId(9) << data.ucLidarId()
        << eprosima::fastcdr::MemberId(10) << data.dLidarLon()
        << eprosima::fastcdr::MemberId(11) << data.dLidarLat()
        << eprosima::fastcdr::MemberId(12) << data.fLidarNorthAngle()
        << eprosima::fastcdr::MemberId(13) << data.bRotationTranslation()
        << eprosima::fastcdr::MemberId(14) << data.fSelfRotTrans()
        << eprosima::fastcdr::MemberId(15) << data.fRangeRotTrans1()
        << eprosima::fastcdr::MemberId(16) << data.fRangeRotTrans2()
        << eprosima::fastcdr::MemberId(17) << data.fUseAngle()
        << eprosima::fastcdr::MemberId(18) << data.ucBuf()
        << eprosima::fastcdr::MemberId(19) << data.vecAngle()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        CLidarDev& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.strSrcIp();
                                            break;

                                        case 1:
                                                dcdr >> data.strDstIp();
                                            break;

                                        case 2:
                                                dcdr >> data.strRedisIp();
                                            break;

                                        case 3:
                                                dcdr >> data.strRedisTopic();
                                            break;

                                        case 4:
                                                dcdr >> data.strDataType();
                                            break;

                                        case 5:
                                                dcdr >> data.strLidarType();
                                            break;

                                        case 6:
                                                dcdr >> data.strBmpPath1();
                                            break;

                                        case 7:
                                                dcdr >> data.strBmpPath2();
                                            break;

                                        case 8:
                                                dcdr >> data.usPort();
                                            break;

                                        case 9:
                                                dcdr >> data.ucLidarId();
                                            break;

                                        case 10:
                                                dcdr >> data.dLidarLon();
                                            break;

                                        case 11:
                                                dcdr >> data.dLidarLat();
                                            break;

                                        case 12:
                                                dcdr >> data.fLidarNorthAngle();
                                            break;

                                        case 13:
                                                dcdr >> data.bRotationTranslation();
                                            break;

                                        case 14:
                                                dcdr >> data.fSelfRotTrans();
                                            break;

                                        case 15:
                                                dcdr >> data.fRangeRotTrans1();
                                            break;

                                        case 16:
                                                dcdr >> data.fRangeRotTrans2();
                                            break;

                                        case 17:
                                                dcdr >> data.fUseAngle();
                                            break;

                                        case 18:
                                                dcdr >> data.ucBuf();
                                            break;

                                        case 19:
                                                dcdr >> data.vecAngle();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const CLidarDev& data)
{
    static_cast<void>(scdr);
    static_cast<void>(data);
}






template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const CLidarParam& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.strNICname(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.vecLidarDev(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const CLidarParam& data)
{
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);

    scdr
        << eprosima::fastcdr::MemberId(0) << data.strNICname()
        << eprosima::fastcdr::MemberId(1) << data.vecLidarDev()
;
    scdr.end_serialize_type(current_state);
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        CLidarParam& data)
{
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.strNICname();
                                            break;

                                        case 1:
                                                dcdr >> data.vecLidarDev();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const CLidarParam& data)
{
    static_cast<void>(scdr);
    static_cast<void>(data);
}



} // namespace fastcdr
} // namespace eprosima

#endif // _FAST_DDS_GENERATED_CLIDARPARAMCDRAUX_IPP_

