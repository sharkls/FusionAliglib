// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CCameraParam.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_CCAMERAPARAM_H_
#define _FAST_DDS_GENERATED_CCAMERAPARAM_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CCAMERAPARAM_SOURCE)
#define CCAMERAPARAM_DllAPI __declspec( dllexport )
#else
#define CCAMERAPARAM_DllAPI __declspec( dllimport )
#endif // CCAMERAPARAM_SOURCE
#else
#define CCAMERAPARAM_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define CCAMERAPARAM_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima





/*!
 * @brief This class represents the structure C485Param defined by the user in the IDL file.
 * @ingroup CCameraParam
 */
class C485Param
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport C485Param();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~C485Param();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object C485Param that will be copied.
     */
    eProsima_user_DllExport C485Param(
            const C485Param& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object C485Param that will be copied.
     */
    eProsima_user_DllExport C485Param(
            C485Param&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object C485Param that will be copied.
     */
    eProsima_user_DllExport C485Param& operator =(
            const C485Param& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object C485Param that will be copied.
     */
    eProsima_user_DllExport C485Param& operator =(
            C485Param&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x C485Param object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const C485Param& x) const;

    /*!
     * @brief Comparison operator.
     * @param x C485Param object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const C485Param& x) const;

    /*!
     * @brief This function sets a value in member bNetTranf
     * @param _bNetTranf New value for member bNetTranf
     */
    eProsima_user_DllExport void bNetTranf(
            bool _bNetTranf);

    /*!
     * @brief This function returns the value of member bNetTranf
     * @return Value of member bNetTranf
     */
    eProsima_user_DllExport bool bNetTranf() const;

    /*!
     * @brief This function returns a reference to member bNetTranf
     * @return Reference to member bNetTranf
     */
    eProsima_user_DllExport bool& bNetTranf();


    /*!
     * @brief This function copies the value in member strUsbDev
     * @param _strUsbDev New value to be copied in member strUsbDev
     */
    eProsima_user_DllExport void strUsbDev(
            const std::string& _strUsbDev);

    /*!
     * @brief This function moves the value in member strUsbDev
     * @param _strUsbDev New value to be moved in member strUsbDev
     */
    eProsima_user_DllExport void strUsbDev(
            std::string&& _strUsbDev);

    /*!
     * @brief This function returns a constant reference to member strUsbDev
     * @return Constant reference to member strUsbDev
     */
    eProsima_user_DllExport const std::string& strUsbDev() const;

    /*!
     * @brief This function returns a reference to member strUsbDev
     * @return Reference to member strUsbDev
     */
    eProsima_user_DllExport std::string& strUsbDev();


    /*!
     * @brief This function sets a value in member unBaudRate
     * @param _unBaudRate New value for member unBaudRate
     */
    eProsima_user_DllExport void unBaudRate(
            uint32_t _unBaudRate);

    /*!
     * @brief This function returns the value of member unBaudRate
     * @return Value of member unBaudRate
     */
    eProsima_user_DllExport uint32_t unBaudRate() const;

    /*!
     * @brief This function returns a reference to member unBaudRate
     * @return Reference to member unBaudRate
     */
    eProsima_user_DllExport uint32_t& unBaudRate();


    /*!
     * @brief This function sets a value in member fTimeout
     * @param _fTimeout New value for member fTimeout
     */
    eProsima_user_DllExport void fTimeout(
            float _fTimeout);

    /*!
     * @brief This function returns the value of member fTimeout
     * @return Value of member fTimeout
     */
    eProsima_user_DllExport float fTimeout() const;

    /*!
     * @brief This function returns a reference to member fTimeout
     * @return Reference to member fTimeout
     */
    eProsima_user_DllExport float& fTimeout();


    /*!
     * @brief This function sets a value in member unId
     * @param _unId New value for member unId
     */
    eProsima_user_DllExport void unId(
            uint32_t _unId);

    /*!
     * @brief This function returns the value of member unId
     * @return Value of member unId
     */
    eProsima_user_DllExport uint32_t unId() const;

    /*!
     * @brief This function returns a reference to member unId
     * @return Reference to member unId
     */
    eProsima_user_DllExport uint32_t& unId();


    /*!
     * @brief This function copies the value in member strIp
     * @param _strIp New value to be copied in member strIp
     */
    eProsima_user_DllExport void strIp(
            const std::string& _strIp);

    /*!
     * @brief This function moves the value in member strIp
     * @param _strIp New value to be moved in member strIp
     */
    eProsima_user_DllExport void strIp(
            std::string&& _strIp);

    /*!
     * @brief This function returns a constant reference to member strIp
     * @return Constant reference to member strIp
     */
    eProsima_user_DllExport const std::string& strIp() const;

    /*!
     * @brief This function returns a reference to member strIp
     * @return Reference to member strIp
     */
    eProsima_user_DllExport std::string& strIp();


    /*!
     * @brief This function sets a value in member unPort
     * @param _unPort New value for member unPort
     */
    eProsima_user_DllExport void unPort(
            uint32_t _unPort);

    /*!
     * @brief This function returns the value of member unPort
     * @return Value of member unPort
     */
    eProsima_user_DllExport uint32_t unPort() const;

    /*!
     * @brief This function returns a reference to member unPort
     * @return Reference to member unPort
     */
    eProsima_user_DllExport uint32_t& unPort();

private:

    bool m_bNetTranf{false};
    std::string m_strUsbDev;
    uint32_t m_unBaudRate{0};
    float m_fTimeout{0.0};
    uint32_t m_unId{0};
    std::string m_strIp;
    uint32_t m_unPort{0};

};




/*!
 * @brief This class represents the structure CCameraDev defined by the user in the IDL file.
 * @ingroup CCameraParam
 */
class CCameraDev
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport CCameraDev();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~CCameraDev();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object CCameraDev that will be copied.
     */
    eProsima_user_DllExport CCameraDev(
            const CCameraDev& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object CCameraDev that will be copied.
     */
    eProsima_user_DllExport CCameraDev(
            CCameraDev&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object CCameraDev that will be copied.
     */
    eProsima_user_DllExport CCameraDev& operator =(
            const CCameraDev& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object CCameraDev that will be copied.
     */
    eProsima_user_DllExport CCameraDev& operator =(
            CCameraDev&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x CCameraDev object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const CCameraDev& x) const;

    /*!
     * @brief Comparison operator.
     * @param x CCameraDev object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const CCameraDev& x) const;

    /*!
     * @brief This function copies the value in member strCameraIp
     * @param _strCameraIp New value to be copied in member strCameraIp
     */
    eProsima_user_DllExport void strCameraIp(
            const std::string& _strCameraIp);

    /*!
     * @brief This function moves the value in member strCameraIp
     * @param _strCameraIp New value to be moved in member strCameraIp
     */
    eProsima_user_DllExport void strCameraIp(
            std::string&& _strCameraIp);

    /*!
     * @brief This function returns a constant reference to member strCameraIp
     * @return Constant reference to member strCameraIp
     */
    eProsima_user_DllExport const std::string& strCameraIp() const;

    /*!
     * @brief This function returns a reference to member strCameraIp
     * @return Reference to member strCameraIp
     */
    eProsima_user_DllExport std::string& strCameraIp();


    /*!
     * @brief This function sets a value in member usCameraId
     * @param _usCameraId New value for member usCameraId
     */
    eProsima_user_DllExport void usCameraId(
            uint16_t _usCameraId);

    /*!
     * @brief This function returns the value of member usCameraId
     * @return Value of member usCameraId
     */
    eProsima_user_DllExport uint16_t usCameraId() const;

    /*!
     * @brief This function returns a reference to member usCameraId
     * @return Reference to member usCameraId
     */
    eProsima_user_DllExport uint16_t& usCameraId();


    /*!
     * @brief This function copies the value in member strCameraUser
     * @param _strCameraUser New value to be copied in member strCameraUser
     */
    eProsima_user_DllExport void strCameraUser(
            const std::string& _strCameraUser);

    /*!
     * @brief This function moves the value in member strCameraUser
     * @param _strCameraUser New value to be moved in member strCameraUser
     */
    eProsima_user_DllExport void strCameraUser(
            std::string&& _strCameraUser);

    /*!
     * @brief This function returns a constant reference to member strCameraUser
     * @return Constant reference to member strCameraUser
     */
    eProsima_user_DllExport const std::string& strCameraUser() const;

    /*!
     * @brief This function returns a reference to member strCameraUser
     * @return Reference to member strCameraUser
     */
    eProsima_user_DllExport std::string& strCameraUser();


    /*!
     * @brief This function copies the value in member strCameraPwd
     * @param _strCameraPwd New value to be copied in member strCameraPwd
     */
    eProsima_user_DllExport void strCameraPwd(
            const std::string& _strCameraPwd);

    /*!
     * @brief This function moves the value in member strCameraPwd
     * @param _strCameraPwd New value to be moved in member strCameraPwd
     */
    eProsima_user_DllExport void strCameraPwd(
            std::string&& _strCameraPwd);

    /*!
     * @brief This function returns a constant reference to member strCameraPwd
     * @return Constant reference to member strCameraPwd
     */
    eProsima_user_DllExport const std::string& strCameraPwd() const;

    /*!
     * @brief This function returns a reference to member strCameraPwd
     * @return Reference to member strCameraPwd
     */
    eProsima_user_DllExport std::string& strCameraPwd();


    /*!
     * @brief This function copies the value in member vecInParameter
     * @param _vecInParameter New value to be copied in member vecInParameter
     */
    eProsima_user_DllExport void vecInParameter(
            const std::vector<float>& _vecInParameter);

    /*!
     * @brief This function moves the value in member vecInParameter
     * @param _vecInParameter New value to be moved in member vecInParameter
     */
    eProsima_user_DllExport void vecInParameter(
            std::vector<float>&& _vecInParameter);

    /*!
     * @brief This function returns a constant reference to member vecInParameter
     * @return Constant reference to member vecInParameter
     */
    eProsima_user_DllExport const std::vector<float>& vecInParameter() const;

    /*!
     * @brief This function returns a reference to member vecInParameter
     * @return Reference to member vecInParameter
     */
    eProsima_user_DllExport std::vector<float>& vecInParameter();


    /*!
     * @brief This function copies the value in member vecRotateMatrix
     * @param _vecRotateMatrix New value to be copied in member vecRotateMatrix
     */
    eProsima_user_DllExport void vecRotateMatrix(
            const std::vector<float>& _vecRotateMatrix);

    /*!
     * @brief This function moves the value in member vecRotateMatrix
     * @param _vecRotateMatrix New value to be moved in member vecRotateMatrix
     */
    eProsima_user_DllExport void vecRotateMatrix(
            std::vector<float>&& _vecRotateMatrix);

    /*!
     * @brief This function returns a constant reference to member vecRotateMatrix
     * @return Constant reference to member vecRotateMatrix
     */
    eProsima_user_DllExport const std::vector<float>& vecRotateMatrix() const;

    /*!
     * @brief This function returns a reference to member vecRotateMatrix
     * @return Reference to member vecRotateMatrix
     */
    eProsima_user_DllExport std::vector<float>& vecRotateMatrix();


    /*!
     * @brief This function copies the value in member vecTranslationMatrix
     * @param _vecTranslationMatrix New value to be copied in member vecTranslationMatrix
     */
    eProsima_user_DllExport void vecTranslationMatrix(
            const std::vector<float>& _vecTranslationMatrix);

    /*!
     * @brief This function moves the value in member vecTranslationMatrix
     * @param _vecTranslationMatrix New value to be moved in member vecTranslationMatrix
     */
    eProsima_user_DllExport void vecTranslationMatrix(
            std::vector<float>&& _vecTranslationMatrix);

    /*!
     * @brief This function returns a constant reference to member vecTranslationMatrix
     * @return Constant reference to member vecTranslationMatrix
     */
    eProsima_user_DllExport const std::vector<float>& vecTranslationMatrix() const;

    /*!
     * @brief This function returns a reference to member vecTranslationMatrix
     * @return Reference to member vecTranslationMatrix
     */
    eProsima_user_DllExport std::vector<float>& vecTranslationMatrix();


    /*!
     * @brief This function copies the value in member vecDistMatrix
     * @param _vecDistMatrix New value to be copied in member vecDistMatrix
     */
    eProsima_user_DllExport void vecDistMatrix(
            const std::vector<float>& _vecDistMatrix);

    /*!
     * @brief This function moves the value in member vecDistMatrix
     * @param _vecDistMatrix New value to be moved in member vecDistMatrix
     */
    eProsima_user_DllExport void vecDistMatrix(
            std::vector<float>&& _vecDistMatrix);

    /*!
     * @brief This function returns a constant reference to member vecDistMatrix
     * @return Constant reference to member vecDistMatrix
     */
    eProsima_user_DllExport const std::vector<float>& vecDistMatrix() const;

    /*!
     * @brief This function returns a reference to member vecDistMatrix
     * @return Reference to member vecDistMatrix
     */
    eProsima_user_DllExport std::vector<float>& vecDistMatrix();

private:

    std::string m_strCameraIp;
    uint16_t m_usCameraId{0};
    std::string m_strCameraUser;
    std::string m_strCameraPwd;
    std::vector<float> m_vecInParameter;
    std::vector<float> m_vecRotateMatrix;
    std::vector<float> m_vecTranslationMatrix;
    std::vector<float> m_vecDistMatrix;

};




/*!
 * @brief This class represents the structure CCameraParam defined by the user in the IDL file.
 * @ingroup CCameraParam
 */
class CCameraParam
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport CCameraParam();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~CCameraParam();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object CCameraParam that will be copied.
     */
    eProsima_user_DllExport CCameraParam(
            const CCameraParam& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object CCameraParam that will be copied.
     */
    eProsima_user_DllExport CCameraParam(
            CCameraParam&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object CCameraParam that will be copied.
     */
    eProsima_user_DllExport CCameraParam& operator =(
            const CCameraParam& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object CCameraParam that will be copied.
     */
    eProsima_user_DllExport CCameraParam& operator =(
            CCameraParam&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x CCameraParam object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const CCameraParam& x) const;

    /*!
     * @brief Comparison operator.
     * @param x CCameraParam object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const CCameraParam& x) const;

    /*!
     * @brief This function sets a value in member unCameraCount
     * @param _unCameraCount New value for member unCameraCount
     */
    eProsima_user_DllExport void unCameraCount(
            uint16_t _unCameraCount);

    /*!
     * @brief This function returns the value of member unCameraCount
     * @return Value of member unCameraCount
     */
    eProsima_user_DllExport uint16_t unCameraCount() const;

    /*!
     * @brief This function returns a reference to member unCameraCount
     * @return Reference to member unCameraCount
     */
    eProsima_user_DllExport uint16_t& unCameraCount();


    /*!
     * @brief This function sets a value in member bUseVideoServer
     * @param _bUseVideoServer New value for member bUseVideoServer
     */
    eProsima_user_DllExport void bUseVideoServer(
            bool _bUseVideoServer);

    /*!
     * @brief This function returns the value of member bUseVideoServer
     * @return Value of member bUseVideoServer
     */
    eProsima_user_DllExport bool bUseVideoServer() const;

    /*!
     * @brief This function returns a reference to member bUseVideoServer
     * @return Reference to member bUseVideoServer
     */
    eProsima_user_DllExport bool& bUseVideoServer();


    /*!
     * @brief This function sets a value in member cameraType
     * @param _cameraType New value for member cameraType
     */
    eProsima_user_DllExport void cameraType(
            uint8_t _cameraType);

    /*!
     * @brief This function returns the value of member cameraType
     * @return Value of member cameraType
     */
    eProsima_user_DllExport uint8_t cameraType() const;

    /*!
     * @brief This function returns a reference to member cameraType
     * @return Reference to member cameraType
     */
    eProsima_user_DllExport uint8_t& cameraType();


    /*!
     * @brief This function copies the value in member vecCameraDev
     * @param _vecCameraDev New value to be copied in member vecCameraDev
     */
    eProsima_user_DllExport void vecCameraDev(
            const std::vector<CCameraDev>& _vecCameraDev);

    /*!
     * @brief This function moves the value in member vecCameraDev
     * @param _vecCameraDev New value to be moved in member vecCameraDev
     */
    eProsima_user_DllExport void vecCameraDev(
            std::vector<CCameraDev>&& _vecCameraDev);

    /*!
     * @brief This function returns a constant reference to member vecCameraDev
     * @return Constant reference to member vecCameraDev
     */
    eProsima_user_DllExport const std::vector<CCameraDev>& vecCameraDev() const;

    /*!
     * @brief This function returns a reference to member vecCameraDev
     * @return Reference to member vecCameraDev
     */
    eProsima_user_DllExport std::vector<CCameraDev>& vecCameraDev();

private:

    uint16_t m_unCameraCount{0};
    bool m_bUseVideoServer{false};
    uint8_t m_cameraType{0};
    std::vector<CCameraDev> m_vecCameraDev;

};

#endif // _FAST_DDS_GENERATED_CCAMERAPARAM_H_



